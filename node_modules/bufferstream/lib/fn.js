(function() {
  var isBuffer, max, min;
  var __slice = Array.prototype.slice;

  isBuffer = Buffer.isBuffer;

  min = Math.min, max = Math.max;

  exports.indexOf = require('buffertools').indexOf;

  exports.concat = function() {
    var args, buffer, buffers, i, idx, input, length, pos, result, _i, _len, _len2;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    idx = -1;
    length = 0;
    buffers = [];
    for (i = 0, _len = args.length; i < _len; i++) {
      input = args[i];
      if (isBuffer(input)) {
        if (input.length) idx = i;
        length += input.length;
        buffers.push(input);
      }
    }
    if (idx !== -1 && length === args[idx].length) return args[idx];
    pos = 0;
    result = new Buffer(length);
    for (_i = 0, _len2 = buffers.length; _i < _len2; _i++) {
      buffer = buffers[_i];
      if (!buffer.length) continue;
      buffer.copy(result, pos);
      pos += buffer.length;
    }
    return result;
  };

  exports.split = function(buffer, pos, offset) {
    var buflen, found, rest;
    if (offset == null) offset = 0;
    buflen = buffer.length;
    found = new Buffer(min(buflen, pos));
    rest = new Buffer(max(0, buflen - pos - offset));
    buffer.copy(found, 0, 0, min(buflen, pos));
    buffer.copy(rest, 0, min(buflen, pos + offset));
    return [found, rest];
  };

}).call(this);
