// Generated by CoffeeScript 1.4.0
(function() {
  var Alarm, Socket, assert;

  assert = require('chai').assert;

  Alarm = require('../ad2usb');

  Socket = require('./socket');

  describe('AD2USB', function() {
    var alarm, socket;
    alarm = null;
    socket = null;
    beforeEach(function() {
      socket = new Socket();
      return alarm = new Alarm(socket);
    });
    it('should arm away', function(done) {
      socket.response = '!Sending.done';
      return alarm.armAway('1234', function() {
        assert.equal(socket.data, '12342');
        return done();
      });
    });
    it('should arm stay', function(done) {
      socket.response = '!Sending.done';
      return alarm.armStay('1234', function() {
        assert.equal(socket.data, '12343');
        return done();
      });
    });
    it('should disarm', function(done) {
      socket.response = '!Sending.done';
      return alarm.disarm('1234', function() {
        assert.equal(socket.data, '12341');
        return done();
      });
    });
    it('should bypass', function(done) {
      socket.response = '!Sending.done';
      return alarm.bypass('1234', '12', function() {
        assert.equal(socket.data, '1234612');
        return done();
      });
    });
    it('should emit disarmed', function(done) {
      alarm.on('disarmed', function() {
        return done();
      });
      return socket.emit('data', '[1000000100000000----],008,[f702000b1008001c08020000000000],"****DISARMED****  Ready to Arm  "\n');
    });
    it('should emit armed stay', function(done) {
      alarm.on('armedStay', function() {
        return done();
      });
      return socket.emit('data', '[0010000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***STAY***                "\n');
    });
    it('should emit armed away', function(done) {
      alarm.on('armedAway', function() {
        return done();
      });
      return socket.emit('data', '[0100000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***AWAY***                "\n');
    });
    it('should not repeatedly emit disarmed', function() {
      var count;
      count = 0;
      alarm.on('disarmed', function() {
        return count += 1;
      });
      socket.emit('data', '[1000000100000000----],008,[f702000b1008001c08020000000000],"****DISARMED****  Ready to Arm  "\n');
      socket.emit('data', '[1000000100000000----],008,[f702000b1008001c08020000000000],"****DISARMED****  Ready to Arm  "\n');
      return assert.equal(1, count);
    });
    it('should not repeatedly emit armed stay', function() {
      var count;
      count = 0;
      alarm.on('armedStay', function() {
        return count += 1;
      });
      socket.emit('data', '[0010000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***STAY***                "\n');
      socket.emit('data', '[0010000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***STAY***                "\n');
      return assert.equal(1, count);
    });
    it('should not repeatedly emit armed away', function() {
      var count;
      count = 0;
      alarm.on('armedAway', function() {
        return count += 1;
      });
      socket.emit('data', '[0100000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***AWAY***                "\n');
      socket.emit('data', '[0100000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***AWAY***                "\n');
      return assert.equal(1, count);
    });
    it('should emit once when alarm status changes', function() {
      var armedCount, disarmedCount;
      disarmedCount = 0;
      armedCount = 0;
      alarm.on('disarmed', function() {
        return disarmedCount += 1;
      });
      alarm.on('armedAway', function() {
        return armedCount += 1;
      });
      socket.emit('data', '[1000000100000000----],008,[f702000b1008001c08020000000000],"****DISARMED****  Ready to Arm  "\n');
      socket.emit('data', '[0100000100000000----],008,[f702000b1008008c08020000000000],"ARMED ***AWAY***                "\n');
      assert.equal(1, disarmedCount);
      return assert.equal(1, armedCount);
    });
    it('should emit rf battery fault', function(done) {
      alarm.on('battery:0102532', function(ok) {
        assert.ok(!ok);
        return done();
      });
      return socket.emit('data', '!RFX:0102532,02\n');
    });
    it('should emit rf supervision fault', function(done) {
      alarm.on('supervision:0102532', function(ok) {
        assert.ok(!ok);
        return done();
      });
      return socket.emit('data', '!RFX:0102532,04\n');
    });
    it('should emit rf loop 1 fault', function(done) {
      alarm.on('loop:0102532:1', function(ok) {
        assert.ok(!ok);
        return done();
      });
      return socket.emit('data', '!RFX:0102532,80\n');
    });
    it('should emit rf loop 2 fault', function(done) {
      alarm.on('loop:0102532:2', function(ok) {
        assert.ok(!ok);
        return done();
      });
      return socket.emit('data', '!RFX:0102532,20\n');
    });
    it('should emit rf loop 3 fault', function(done) {
      alarm.on('loop:0102532:3', function(ok) {
        assert.ok(!ok);
        return done();
      });
      return socket.emit('data', '!RFX:0102532,10\n');
    });
    return it('should emit rf loop 4 fault', function(done) {
      alarm.on('loop:0102532:4', function(ok) {
        assert.ok(!ok);
        return done();
      });
      return socket.emit('data', '!RFX:0102532,40\n');
    });
  });

}).call(this);
